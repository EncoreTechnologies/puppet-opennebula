<%- |
      String $db_backup_path,
      String $db_user,
      String $db_passwd,
      String $auth_backup_path,
| -%>
import json
import shutil
import gzip
import os
import stat
import pwd
import subprocess
import grp

if __name__ == "__main__":
    auth_dir = "/var/lib/one/.one"

    if os.path.exists(auth_dir):
        shutil.rmtree(auth_dir)

    shutil.copytree("<%= $auth_backup_path  %>", auth_dir)

    shutil.chown(auth_dir, "oneadmin", "oneadmin")
    os.chmod(auth_dir, stat.S_IRWXU)

    for root, dirs, files in os.walk(auth_dir):
        for name in files:
            file_path = os.path.join(root, name)
            shutil.chown(file_path, "oneadmin", "oneadmin")
            os.chmod(file_path, stat.S_IREAD | stat.S_IWRITE)

    shutil.rmtree("<%= $auth_backup_path  %>")

    list_of_db_files = [os.path.join("<%= $db_backup_path %>", file) for file in os.listdir("<%= $db_backup_path %>") if os.path.isfile(os.path.join("<%= $db_backup_path %>", file))]
    latest_db_file = os.path.basename(max(list_of_db_files, key=os.path.getmtime))

    source_db_file = os.path.join("<%= $db_backup_path %>", latest_db_file)
    zipped_destination_db_file = os.path.join("/tmp", latest_db_file)
    destination_db_file = zipped_destination_db_file[:-3]
    shutil.copy(source_db_file, zipped_destination_db_file)

    with gzip.open(zipped_destination_db_file, 'rb') as f_in:
        with open(destination_db_file, 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out)

    result = subprocess.run(
        ["onedb", "restore", "-f", destination_db_file],
        capture_output=True,
        text=True,
    )

    if result.returncode != 0:
        raise Exception("error trying to restore database; {}".format(result.stderr))
